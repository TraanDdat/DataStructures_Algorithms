* Decreasing Function
    EX:

    void func(int n)            --> T(n)
    {
        if(n>0)                 
        {
            printf("%d",n);     --> 1
            func(n-1);          --> T(n-1)
        }
    }

            = T(n-1) + 1 when n > 0
    --> T(n) |
            = 1 when n = 0

    General: (Using "Successive Substitution")
    T(n) = T(n-1) + 1 --> (1) <T(n-1) = T(n-2) + 1>
    T(n) = T(n-2) + 1 + 1 = T(n-2) + 2 (2)
    T(n) = T(n-3) + 1 + 2 = T(n-3) + 3 (3)
    ...
    T(n) = T(n-k) + 1 + k - 1 = T(n-k) + k (k)

    Assume: n - k = 0 --> n = k
            --> T(n) = T(n-n) + n = T(0) + n = 1 + n --> Time Complexity O(n)

    * Conclusion: T(n) = a*T(n-b) + f(n)
    a -> number of recursive calls 
    b -> decreased value (Ex: func(n-1) -> b=1)
    f(n) -> Work done